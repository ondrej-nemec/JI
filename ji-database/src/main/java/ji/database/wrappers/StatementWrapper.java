package ji.database.wrappers;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import ji.database.support.SqlQueryProfiler;

public class StatementWrapper implements Statement {

	private final Statement statement;
	
	public final String ID;
	protected final SqlQueryProfiler profiler;
	
	public StatementWrapper(Statement statement, String ID, SqlQueryProfiler profiler) {
		this.statement = statement;
		this.ID = ID;
		this.profiler = profiler;
	}
	
	public SqlQueryProfiler getProfiler() {
		return profiler;
	}
	
	/************/

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		profiler.execute(ID, sql);
		ResultSet rs = statement.executeQuery(sql);
		profiler.executed(ID, rs.getClass().getName());
		return rs;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		profiler.execute(ID, sql);
		int res = statement.executeUpdate(sql);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		profiler.prepare(ID, sql);
		statement.addBatch(sql);
	//	profiler.executed();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		profiler.execute(ID, sql);
		boolean res = statement.execute(sql);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		profiler.execute(ID, sql);
		int res = statement.executeUpdate(sql, autoGeneratedKeys);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		profiler.execute(ID, sql);
		int res = statement.executeUpdate(sql, columnIndexes);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		profiler.execute(ID, sql);
		int res = statement.executeUpdate(sql, columnNames);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		profiler.execute(ID, sql);
		boolean res = statement.execute(sql, autoGeneratedKeys);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		profiler.execute(ID, sql);
		boolean res = statement.execute(sql, columnIndexes);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		profiler.execute(ID, sql);
		boolean res = statement.execute(sql, columnNames);
		profiler.executed(ID, res);
		return res;
	}

	@Override
	public int[] executeBatch() throws SQLException {
		profiler.execute(ID);
		int[] res = statement.executeBatch();
		profiler.executed(ID, res);
		return res;
	}
	
	/**********/
	
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return statement.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return statement.isWrapperFor(iface);
	}

	@Override
	public void close() throws SQLException {
		statement.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		statement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		statement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		statement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		statement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		statement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		statement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		statement.setCursorName(name);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return statement.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		statement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		statement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	@Override
	public void clearBatch() throws SQLException {
		statement.clearBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return statement.getConnection();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return statement.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		statement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return statement.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		statement.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return statement.isCloseOnCompletion();
	}

}
